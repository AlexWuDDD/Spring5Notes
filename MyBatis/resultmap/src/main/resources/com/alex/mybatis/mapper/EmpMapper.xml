<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alex.mybatis.mapper.EmpMapper">

  <resultMap id="empResultMap" type="Emp">
    <!-- property 映射关系中的属性名 class -->
    <!-- column 映射关系中的字段名 sql -->
    <id property="eid" column="eid" />
    <result property="empName" column="emp_name" />
    <result property="age" column="age" />
    <result property="sex" column="sex" />
    <result property="email" column="email" />
  </resultMap>
  <!-- List<Emp> getAllEmp(); -->
  <select id="getAllEmp" resultMap="empResultMap">
    <!-- 解决字段名和属性不一致的方式三 resultMap -->
    SELECT * FROM t_emp
  </select>

  <select id="getAllEmpOld" resultType="Emp">
    <!-- 解决字段名和属性不一致的方式一 -->
    <!-- SELECT eid, emp_name empName, age, sex, email FROM t_emp -->
    <!-- 解决字段名和属性不一致的方式二：全局setting -->
    SELECT * FROM t_emp
  </select>

  <!-- 处理多对一映射关系方式一：级联属性赋值 -->
  <resultMap id="EmpAndDeptResultMapOne" type="Emp">
    <id property="eid" column="eid"/>
    <result property="empName" column="emp_name" />
    <result property="age" column="age" />
    <result property="sex" column="sex" />
    <result property="email" column="email" />
    <result property="dept.did" column="did"/>
    <result property="dept.deptName" column="dept_name"/>
  </resultMap>
  <!-- 处理多对一映射关系方式二： association-->
  <resultMap id="EmpAndDeptResultMapTwo" type="Emp">
    <id property="eid" column="eid"/>
    <result property="empName" column="emp_name" />
    <result property="age" column="age" />
    <result property="sex" column="sex" />
    <result property="email" column="email" />
    <!-- 
      association:处理多对一的映射关系
      property:需要处理多对一的映射关系的属性名
      javaType:该属性的类型
     -->
    <association property="dept" javaType="Dept">
      <id property="did" column="did" />
      <result property="deptName" column="dept_name"/>
    </association>
  </resultMap>
  <!-- Emp getEmpAndDept(@Param("eid") Integer eid); -->
  <select id="getEmpAndDept" resultMap="EmpAndDeptResultMapTwo">
    SELECT * FROM t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.eid = #{eid}
  </select>


  <resultMap id="empAndDeptByStepOneResultMap" type="Emp">
    <id property="eid" column="eid" />
    <result property="empName" column="emp_name" />
    <result property="age" column="age" />
    <result property="sex" column="sex" />
    <result property="email" column="email" />
    <!-- 
      select：设置分布查询的sql的唯一标识（namespace.SQLId或mapper接口的全类名.方法名
      column: 设置分布查询的条件
      fetchType: 当开启了全局的延迟加载之后，可通过此属性手动控制延迟加载的效果
      fetchType="lazy|eager"
     -->
    <association property="dept"
      select="com.alex.mybatis.mapper.DeptMapper.getEmpAndDeptByStepTwo"
      column="did"
      fetchType="lazy"
    ></association>
  </resultMap>

  <!-- Emp getEmpAndDeptByStepOne(@Param("eid") Integer eid); -->
  <select id="getEmpAndDeptByStepOne" resultMap="empAndDeptByStepOneResultMap">
    SELECT * FROM t_emp where eid = #{eid}
  </select>


  <resultMap id="deptAndEmpsStepTwoResultMap" type="Emp">
    <!-- property 映射关系中的属性名 class -->
    <!-- column 映射关系中的字段名 sql -->
    <id property="eid" column="eid" />
    <result property="empName" column="emp_name" />
    <result property="age" column="age" />
    <result property="sex" column="sex" />
    <result property="email" column="email" />
  </resultMap>
  <!-- List<Emp> getDeptAndEmpsStepTwo(@Param("did") Integer did); -->
  <select id="getDeptAndEmpsStepTwo" resultMap="deptAndEmpsStepTwoResultMap">
    SELECT * FROM t_emp where did = #{did}
  </select>

</mapper>